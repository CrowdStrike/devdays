version: 0.2
env:
  secrets-manager:
    FALCON_CLIENT_ID: "FalconAPIKey:client_id"
    FALCON_CLIENT_SECRET: "FalconAPIKey:client_secret"
phases:
  install: # Install AWS cli, kubectl (needed for Helm) and Helm
    commands:
      - apt install -y awscli git python3
      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - chmod +x kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.0-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz
      - chmod +x ./linux-amd64/helm
      - mv ./linux-amd64/helm /usr/local/bin/helm
  pre_build: # Add kubeconfig to access to EKS cluster
    commands:
      - echo Creating kubeconfig for Amazon EKS...
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
  build: # Build Docker image and tag it with the commit sha
    commands:
      - echo Creating k8sprotection config file
  post_build: # Push the Docker image to the ECR
    commands:
      - $(aws ecr get-login --no-include-email --region eu-west-3)
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - "helm upgrade -i <RELEASE_NAME> <PATH_TO_HELM_FILES> -f ./path/to/kubernetes/values/values.$ENV.yaml --set image.tag=$CODEBUILD_RESOLVED_SOURCE_VERSION"


  version: 0.2
  phases:
    install: # Install AWS cli, kubectl (needed for Helm) and Helm
      commands:
        - apt install -y awscli git python3
        - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
        - chmod +x ./aws-iam-authenticator
        - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        - chmod +x kubectl
        - mv ./kubectl /usr/local/bin/kubectl
        - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.0-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz
        - chmod +x ./linux-amd64/helm
        - mv ./linux-amd64/helm /usr/local/bin/helm
    pre_build: # Add kubeconfig to access to EKS cluster
      commands:
        - "mkdir ~/.kube/"
        - "cp config-$ENV ~/.kube/config"
    build: # Build Docker image and tag it with the commit sha
      commands:
        - docker build . -t $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION -f <PATH_TO_DOCKER_FILE>
        - docker tag $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
    post_build: # Push the Docker image to the ECR
      commands:
        - $(aws ecr get-login --no-include-email --region eu-west-3)
        - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
        - "helm upgrade -i <RELEASE_NAME> <PATH_TO_HELM_FILES> -f ./path/to/kubernetes/values/values.$ENV.yaml --set image.tag=$CODEBUILD_RESOLVED_SOURCE_VERSION"