---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates a CI/CD pipeline for the vulnerable app.'
Parameters:

  # AWS Secrets Manager
  FalconClientID:
    Description: 'Client ID for the Falcon API'
    Type: String
  
  FalconClientSecret:
    Description: 'Client Secret for the Falcon API'
    Type: String

  # AWS ECR Repository
  ECRRepositoryName:
    Type: String
    Default: 'vuln-tomcat'


  # AWS CodeCommit Repository
  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: main
  RepositoryName:
    Description: CodeCommit repository name
    Type: String
    Default: vulnerableapp
  RepositoryDescription:
    Description: CodeCommit repository description
    Type: String
    Default: DevDay Code Repository
  S3CodeBucketName:
    Description: Name of the S3 bucket with the initial commit of code
    Type: String
  S3CodeBucketKey:
    Description: Key of the S3 bucket with the initial commit of code
    Type: String
  

  # AWS CodeBuild Project
  ECRCodeBuildProjectName:
    Description: CodeBuild Project Name for building the app image
    Type: String
    Default: ecrCodeBuildProject

  # AWS EKS CodeBuild Project
  EKSCodeBuildServiceRoleArn:
    Description: CodeBuild Service Role for EKS
    Type: String
  EKSCodeBuildProjectName:
    Description: CodeBuild Project Name for deploying to EKS
    Type: String
    Default: eks-deploy-devday # TODO: Give a proper name
  EKSClusterName:
    Description: EKS Cluster name to deploy to
    Type: String

Resources:

  # AWS Secrets Manager Secrets
  SMFalconAPIKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'FalconAPIKey'
      Description: 'Client ID and Secret for the Falcon API'
      SecretString: !Sub |
        {
          "client_id": "${FalconClientID}",
          "client_secret": "${FalconClientSecret}"
        }

  # AWS ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref ECRRepositoryName


  # AWS CodeCommit Repository
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties: 
      Code: 
        BranchName: !Ref BranchName 
        S3:
          Bucket: !Ref S3CodeBucketName
          Key: !Ref S3CodeBucketKey
      RepositoryDescription: !Ref RepositoryDescription
      RepositoryName: !Ref RepositoryName
  
  # AWS CodePipeline Pipeline    
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false
  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppPipeline
  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref AppPipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: codecommit-events-pipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ECRCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref EKSCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'

  # AWS ECR CodeBuild Project
  ECRCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  ECRCodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRCodeBuildServicePolicy
      Roles:
        - !Ref ECRCodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ecr:*
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - secretsmanager:*
            Resource:
              - !Ref SMFalconAPIKey
  ECRCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ECRCodeBuildProjectName
      ServiceRole: !Ref ECRCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: ecr-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_ECR
            Value: !GetAtt ECRRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: FALCON_CLIENT_ID
            Value: !Ref SMFalconAPIKey
            Type: SECRETS_MANAGER
          - Name: FALCON_CLIENT_SECRET
            Value: !Ref SMFalconAPIKey
            Type: SECRETS_MANAGER

  # AWS EKS CodeBuild Project
  EKSCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref EKSCodeBuildProjectName
      ServiceRole: !Ref EKSCodeBuildServiceRoleArn
      Source:
        Type: CODEPIPELINE
        BuildSpec: eks-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_ECR
            Value: !GetAtt ECRRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EKSClusterName
            Type: PLAINTEXT
          - Name: WAF_ACL_ECR
            Value: !Ref EKSClusterName
            Type: PLAINTEXT