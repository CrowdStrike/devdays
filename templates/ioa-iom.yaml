AWSTemplateFormatVersion: '2010-09-09'
Description: 'cs-cloud-demo-ioa-iom: Creates a Indicators of Misconfiguration (IOMs) and Indicators of Attack (IOAs) in Lambda, VPC, EC2, and S3'

Parameters:
  PublicInstanceAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/24
    Description: CIDR block for the VPC.
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/26
    Description: CIDR block for private subnet 1, located in Availability Zone 1.
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.64/26
    Description: CIDR block for private subnet 2, located in Availability Zone 2.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.128/26
    Description: CIDR block for the public (DMZ) subnet 1, located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.192/26
    Description: CIDR block for the public (DMZ) subnet 2, located in Availability Zone 2.
    Type: String
  KeyPairName:
    Description: EC2 key pair for SSH/RDP access
    Type: String

Resources:

# Lambda Functions
  publicLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cs-cloud-demo-public-lambda"
      Runtime: nodejs14.x
      Role: !GetAtt "publicLambdaRole.Arn"
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('Loading function');
          exports.handler = async (event, context) => {
              //console.log('Received event:', JSON.stringify(event, null, 2));
              console.log('value1 =', event.key1);
              console.log('value2 =', event.key2);
              console.log('value3 =', event.key3);
              return event.key1;  // Echo back the first key value
              // throw new Error('Something went wrong');
          };
      Description: Basic Hello-World function for IOM Demo.
  publicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "cs-cloud-demo-public-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  publicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref publicLambda
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  permissiveLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cs-cloud-demo-permissive-lambda"
      Runtime: nodejs14.x
      Role: !GetAtt "permissiveLambdaRole.Arn"
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('Loading function');
          exports.handler = async (event, context) => {
              //console.log('Received event:', JSON.stringify(event, null, 2));
              console.log('value1 =', event.key1);
              console.log('value2 =', event.key2);
              console.log('value3 =', event.key3);
              return event.key1;  // Echo back the first key value
              // throw new Error('Something went wrong');
          };
      Description: Basic Hello-World function for IOM Demo.
  permissiveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "cs-cloud-demo-permissive-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: permissive-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

# Public S3 Bucket
  bucket:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: cs-cloud-demo-public-s3
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  bucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:Put*'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref bucket
                - /*
            Principal: '*'

# Permissive Instance Profile
  permissiveEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "cs-cloud-demo-permissive-ec2-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: permissive-ec2
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  permissiveEc2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref permissiveEc2Role

# Public EC2 Instance
  publicInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref PublicInstanceAMI
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref permissiveEc2Profile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
      - !GetAtt publicSg.GroupId
      Tags: 
        - Key: 'Name'
          Value: 'cs-cloud-demo-public-ec2'
  publicSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Public access to Ec2 Instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

# VPC for "Public" Compute Resources
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-InternetGateway"
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATIP
        - AllocationId
      SubnetId:
        Ref: "PublicSubnet1"
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-nat"
  NATIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-nat-ip"
  PrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: "PrivateRouteTable1"
  PrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: "PrivateRouteTable2"
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-PrivateRouteTable1"
      VpcId:
        Ref: VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-PrivateRouteTable2"
      VpcId:
        Ref: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-PublicRouteTable"
      VpcId:
        Ref: VPC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    DependsOn:
    - VPCGatewayAttachment
  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1"
      SubnetId:
        Ref: "PrivateSubnet1"
  RouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable2"
      SubnetId:
        Ref: "PrivateSubnet2"
  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: "PublicSubnet1"
  RouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: "PublicSubnet2"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
      - Key: Name
        Value: "cs-cloud-demo-public-SubnetPrivate1"
      VpcId:
        Ref: VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
      - Key: Name
        Value: "cs-cloud-demo-public-SubnetPrivate2"
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: kubernetes.io/role/elb
        Value: '1'
      - Key: Name
        Value: "cs-cloud-demo-public-Publicsubnet1"
      VpcId:
        Ref: VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: kubernetes.io/role/elb
        Value: '1'
      - Key: Name
        Value: "cs-cloud-demo-public-Publicsubnet2"
      VpcId:
        Ref: VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-VPC"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: "cs-cloud-demo-public-VPC-ACL"
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0