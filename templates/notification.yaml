---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sends Stack completion HTTP POST to endpoint'
Parameters:
  EnvAlias:
    Type: String
  EnvHash:
    Type: String
  BastionEIP:
    Type: String
  EksClusterName:
    Type: String
  PermissionsBoundary:
    Type: String
    Default: ''
Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]
Resources:
  NotificationResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt NotificationFunction.Arn
      name: cnap
      account: !Ref AWS::AccountId
      alias: !Ref EnvAlias
      environment_id: !Ref EnvHash
      cluster_name: !Ref EksClusterName
      bastion_ip: !Ref BastionEIP

  NotificationRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Called on stack deletion. Removes objects from ECR and S3 to enabled stack deletion to complete
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt NotificationRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import urllib3
          import json
          from urllib.parse import urlencode
          import cfnresponse
          import logging
          import ssl
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          http = urllib3.PoolManager(cert_reqs=ssl.CERT_NONE)
          WEBHOOK_URL = 'https://api.falcon.events/api/monitoring/webhook'
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              logger.info('Received event:{}'.format(json.dumps(event)))
              status = cfnresponse.SUCCESS
              # Delete the repositories int the list
              try:
                  name = event['ResourceProperties']['name']
                  alias =  event['ResourceProperties']['alias']
                  environment_id = event['ResourceProperties']['environment_id']
                  account = event['ResourceProperties']['account']
                  bastion_ip = event['ResourceProperties']['bastion_ip']
                  cluster_name = event['ResourceProperties']['cluster_name']
          
                  data = {"name": name,
                          "account": account,
                          "alias": alias,
                          "environment_id": environment_id,
                          "cluster_name": cluster_name,
                          "bastion_ip": bastion_ip}
          
                  encoded_data = urlencode(data)
                  response = http.request('POST',
                               WEBHOOK_URL,
                               headers={'Content-Type':'application/json'},body=json.dumps(data))
                  print(response)
              except Exception as error:
                  logger.info("Error {}".format(error))
              finally:
                  # Always send success response to prevent stack failure
                  cfnresponse.send(event, context, status, {}, None)

          
