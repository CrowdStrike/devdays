AWSTemplateFormatVersion: '2010-09-09'
Description: Horizon SE Workshops

Parameters:
  EnvAlias:
    Type: String
    Default: ''
  EnvHash:
    Type: String
    Default: ''
  PermissionsBoundary:
    Type: String
    Default: ''
  CSCloud:
    Type: String
    AllowedValues:
      - 'us-1'
      - 'us-2'
      - 'eu-1'
  S3Bucket:
    Type: String
    Description: Bucket for lambda files
    Default: ''
  S3Prefix:
    Type: String
    Description: path to objects
    Default: ''

Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]

Resources:

  # The lambda role requires Admin rights to create resources required for CPSM
  # CSPM creates IAM roles, cloudtrail and eventbridge infra
  # Lab users have reader permissions so they cannot modify this lambda or attach the role to another resource
  CrowdStrikeK8sRegisterAcctLambdaRole1:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: List_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
                - events:*
                - cloudtrail:DescribeTrails
              Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess

  #
  # Lambda layer for FalconPy.
  #
  falconpylayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join [ '/', [ !Ref S3Prefix, 'falconpy-layer.zip' ] ]
      Description: Layer for falconpy package
      LayerName: requests-package
  ##
  ## Trigger the lambda function to provision/deprovision the account with CRWD using a CFT.
  ##
  TriggerRegisterAccountLambda:
    Type: 'Custom::TriggerLambda'
    Properties:
      ServiceToken: !GetAtt
        - RegisterK8sProAccount1
        - Arn
  #
  # Lambda function to provision/de provision the account with CRWD using a CFT.
  #
  RegisterK8sProAccount1:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          secret_store_name: 'FalconAPIKey'
          secret_store_region: !Ref AWS::Region
          permissions_boundary: !Ref PermissionsBoundary
          aws_region: !Ref AWS::Region
          s3_staging_bucket: !Ref S3Bucket
          s3_prefix: !Ref S3Prefix
          cs_cloud: !Ref CSCloud
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join [ '/', [ !Ref S3Prefix, 'k8s_registration.zip' ] ]
      Layers:
        - !Ref falconpylayer
      Handler: k8s_registration.lambda_handler
      MemorySize: 128
      Role: !GetAtt "CrowdStrikeK8sRegisterAcctLambdaRole1.Arn"
      Runtime: python3.8
      Timeout: 300
