AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: String
    Description: Kubernetes VPC VPC ID
  PublicSubnet1:
    Type: String
    Description: Kuberntes VPC Public Subnet
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t3a.medium.
  RemoteAccessCIDR:
    Type: String
    Description: The IP address of the workstation that can SSH into the instance.
  KeyPairName:
    Type: String
    #Default: cs-key
    Description: The key used to access the instance.
  SecHubInstaller:
    Type: String
    Description: Name of the Security Hub installer.
    Default: sechub-2.0.latest-install.run
  FalconClientId:
    NoEcho: true
    Description: Falcon OAuth2 Client ID.
    Type: String
    NoEcho: true
  FalconSecret:
    NoEcho: true
    Description: Falcon Oath2 API secret.
    Type: String
    NoEcho: true
  S3Bucket:
    Type: String
    Description: S3 staging bucket
  S3Prefix:
    Type: String
    Description: prefix file path
  LatestLinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    # Cloudshare Permisions Boundary
  PermissionsBoundary:
    Type: String
    Default: ''

Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]
Resources:
  InstanceBootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceIAMRole'
  InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - SecHubRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH in, all traffic out."
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:  !Sub ${RemoteAccessCIDR}
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Linux

  # The Security Hub Integration instance - sends detections to SQS for processing
  Linux:
    Type: 'AWS::EC2::Instance'
    DependsOn: SecHubIntQueue
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref LatestLinuxAMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 250
      IamInstanceProfile: !Ref InstanceBootstrapInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          # version 3.0
          # Should consider also bootstrapping the CrowdStrike sensor at this point
          # depending on current deployment patterns for the environment in question
          cd /var/tmp
          hostname -b ${AWS::StackName}-fig
          echo ${AWS::StackName}-fig > /etc/hostname
          cat /etc/hosts | sed 's/  localhost/localhost ${AWS::StackName}-fig/g'
          # install packages
          yum install zsh -y
          mkdir /home/ssm-user
          touch /home/ssm-user/.zshrc
          mkdir /usr/share/fig
          # SecHub integration Lambda install
          wget -O ${SecHubInstaller} https://raw.githubusercontent.com/CrowdStrike/Cloud-AWS/master/Security-Hub/install/${SecHubInstaller}
          chmod 755 ${SecHubInstaller}
          ./${SecHubInstaller} --target /usr/share/fig
          # create FIG config.json ZipFile:
          cat << EOF > /usr/share/fig/config.json
          {
              "base_url":"https://api.crowdstrike.com",
              "falcon_client_id":"${FalconClientId}",
              "falcon_client_secret":"${FalconSecret}",
              "app_id":"${SecHubIntQueue.QueueName}",
              "severity_threshold":3,
              "sqs_queue_name":"${SecHubIntQueue.QueueName}",
              "region":"${AWS::Region}"
          }
          EOF
      Tags:
        -
          Key: Name
          Value: Security Hub Integration Server

  # SQS queues to hold detections from the instance
  SecHubIntQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: !Join ['-', ['crwd-sechub-q', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "SecHubIntDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 5
  SecHubIntDeadLetterQueue:
    Type: AWS::SQS::Queue

  # Primary detections handling lambda
  CRWDSecHubIntegration:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join ['/', [!Ref S3Prefix, 'sechub-identify-detections_lambda.zip'] ]
      Environment:
        Variables:
          DEBUG: True
      Layers:
        - !Ref lambdaLayer
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt SecHubIntLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
  SecHubIntLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - FIG-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: Get_Values
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: '*'
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                  - securityhub:*
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  # FalconPy SDK lambda layer - Includes requests and urllib3
  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join ['/', [!Ref S3Prefix, 'falconpy-layer.zip']]  
      Description: Layer for requests package
      LayerName: requests-package

  # Trigger from SQS to call our lambda handler
  SecHubIntQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SecHubIntQueue.Arn
      FunctionName: !Ref 'CRWDSecHubIntegration'

  # Enable SecurityHub
  RegionSecurityHub:
    Type: 'AWS::SecurityHub::Hub'

Outputs:
  PublicIp:
    Value:
      Fn::GetAtt:
        - Linux
        - PublicIp
    Description: Server's PublicIp Address
