---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Managed Nodes (SSH access: false) [created by eksctl]'
Parameters:
  PermissionsBoundary:
    Type: String
    Default: 'BoundaryForAdministratorAccess'
  EksClusterName:
    Type: String
  ClusterSecurityGroupId:
    Type: String
  SubnetPrivate1:
    Type: String
  SubnetPrivate2:
    Type: String

Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Iops: 3000
            Throughput: 125
            VolumeSize: 80
            VolumeType: gp3
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        SecurityGroupIds:
          - !Ref ClusterSecurityGroupId
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: k8s-jharris-daemonset-ng-fffe2ff7-Node
          - Key: cstag-account
            Value: dev
          - Key: cstag-business
            Value: Sales
          - Key: cstag-product
            Value: Host Platform
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-fffe2ff7
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
          - Key: cstag.owner
            Value: Justin.Harris
          - Key: cstag-department
            Value: Sales-310000
        - ResourceType: volume
          Tags:
          - Key: Name
            Value: k8s-jharris-daemonset-ng-fffe2ff7-Node
          - Key: cstag-account
            Value: dev
          - Key: cstag-business
            Value: Sales
          - Key: cstag-product
            Value: Host Platform
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-fffe2ff7
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
          - Key: cstag.owner
            Value: Justin.Harris
          - Key: cstag-department
            Value: Sales-310000
        - ResourceType: network-interface
          Tags:
          - Key: Name
            Value: k8s-jharris-daemonset-ng-fffe2ff7-Node
          - Key: cstag-account
            Value: dev
          - Key: cstag-business
            Value: Sales
          - Key: cstag-product
            Value: Host Platform
          - Key: alpha.eksctl.io/nodegroup-name
            Value: ng-fffe2ff7
          - Key: alpha.eksctl.io/nodegroup-type
            Value: managed
          - Key: cstag.owner
            Value: Justin.Harris
          - Key: cstag-department
            Value: Sales-310000
      LaunchTemplateName:
        Fn::Sub: "${AWS::StackName}"
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      ClusterName: !Ref EksClusterName
      InstanceTypes:
      - m5.large
      Labels:
        alpha.eksctl.io/cluster-name: !Ref EksClusterName
        alpha.eksctl.io/nodegroup-name: ng-fffe2ff7
      LaunchTemplate:
        Id:
          Ref: LaunchTemplate
      NodeRole:
        Fn::GetAtt:
        - NodeInstanceRole
        - Arn
      NodegroupName: ng-fffe2ff7
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets:
        - !Ref SubnetPrivate1
        - !Ref SubnetPrivate2

      Tags:
        alpha.eksctl.io/nodegroup-name: ng-fffe2ff7
        alpha.eksctl.io/nodegroup-type: managed
        cstag-account: dev
        cstag-business: Sales
        cstag-department: Sales-310000
        cstag-product: Host Platform
        cstag.owner: Justin.Harris
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - ServicePrincipalPartitionMap
              - Ref: AWS::Partition
              - EC2
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: "/"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/NodeInstanceRole"

Outputs:
  EKSNodeSecurityGroup:
    Value: !Ref ClusterSecurityGroupId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::EKSNodeSecurityGroup"