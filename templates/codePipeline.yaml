---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates a CI/CD pipeline for the vulnerable app.'
Parameters:
  EnvAlias:
    Type: String
    Default: 'devdays-cnap'
  EnvHash:
    Type: String
    Default: ''
  SensorCodeBuildProjectName:
    Description: CodeBuild Project Name for uploading sensor image to ECR
    Type: String
    Default: sensor-image-import
  # AWS Secrets Manager
  CrowdStrikeCloud:
    Description: 'CrowdStrike Cloud'
    Type: String
    Default: 'us-1'
  FalconClientID:
    NoEcho: true
    Description: 'Client ID for the Falcon API'
    Type: String
  FalconClientSecret:
    NoEcho: true
    Description: 'Client Secret for the Falcon API'
    Type: String
  FalconCID:
    NoEcho: true
    Description: 'Customer CID for the Falcon Installation'
    Type: String

  # AWS ECR Repository
  ECRRepositoryName:
    Type: String
    Default: 'webapp'
  SensorECRRepositoryName:
    Type: String
    Default: 'falcon-sensor'
  ImageScanECRRepositoryName:
    Type: String
    Default: 'test-image'
  # AWS CodeCommit Repository
  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: main
  RepositoryName:
    Description: CodeCommit repository name
    Type: String
    Default: webapp
  RepositoryDescription:
    Description: CodeCommit repository description
    Type: String
    Default: DevDay Code Repository
  S3CodeBucketName:
    Description: Name of the S3 bucket with the initial commit of code
    Type: String
  S3Prefix:
    Description: prefix for file path
    Type: String
    Default: 'templates'
  S3CodeBucketKey:
    Description: Key of the S3 bucket with the initial commit of code
    Type: String
    Default: 'code.zip'
  # AWS CodeBuild Project
  ECRCodeBuildProjectName:
    Description: CodeBuild Project Name for building the app image
    Type: String
    Default: webapp-image-build
  # AWS EKS CodeBuild Project
  EKSCodeBuildServiceRoleArn:
    Description: CodeBuild Service Role for EKS
    Type: String
  EKSCodeBuildProjectName:
    Description: CodeBuild Project Name for deploying to EKS
    Type: String
    Default: eks-webapp-deploy
  EKSClusterName:
    Description: EKS Cluster name to deploy to
    Type: String
    Default: 'devdays-cnap-EKS-Cluster'
  PodS3AccessRoleArn:
    Description: IAM Role to associate with the Service Account
    Type: String
  WafRulesARN:
    Type: String
  # Cloudshare Permisions Boundary
  PermissionsBoundary:
    Type: String
    Default: ''


Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]

Resources:

  ################################
  #                              #
  #        Falcon Secrets        #
  #                              #
  ################################

  SMFalconAPIKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'FalconAPIKey'
      Description: 'Client ID and Secret for the Falcon API'
      SecretString: !Sub |
        {
          "client_id": "${FalconClientID}",
          "client_secret": "${FalconClientSecret}",
          "cid": "${FalconCID}",
          "cs_cloud":"${CrowdStrikeCloud}"
        }

  ################################
  #                              #
  #      App Build Pipeline      #
  #                              #
  ################################

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName

  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      Code:
        BranchName: !Ref BranchName
        S3:
          Bucket: !Ref S3CodeBucketName
          Key: !Join ['/', [!Ref S3Prefix, !Ref S3CodeBucketKey] ] 
      RepositoryDescription: !Ref RepositoryDescription
      RepositoryName: !Ref RepositoryName

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false

  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppPipeline
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref SensorImportPipeline

  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Join
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref AppPipeline
          RoleArn: !GetAtt
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline
        - Arn: !Join
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref SensorImportPipeline
          RoleArn: !GetAtt
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-SensorImportPipeline
        - Arn: !Join
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref ImageScanAppPipeline
          RoleArn: !GetAtt
            - IScanAmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-IScanAppPipeline

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                Resource: '*'
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: webapp-deploy-pipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ECRCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref EKSCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket

  ECRCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  ECRCodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRCodeBuildServicePolicy
      Roles:
        - !Ref ECRCodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ecr:*
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - secretsmanager:*
            Resource:
              - !Ref SMFalconAPIKey
  ECRCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ECRCodeBuildProjectName
      ServiceRole: !Ref ECRCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: ecr-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_ECR
            Value: !GetAtt ECRRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: FALCON_CLIENT_ID
            Value: !Sub
              - '${arn}:client_id'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: FALCON_CLIENT_SECRET
            Value: !Sub
              - '${arn}:client_secret'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: CS_CLOUD
            Value: !Sub
              - '${arn}:cs_cloud'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: CS_SCAN_IMAGE
            Value: 'True'
            Type: PLAINTEXT
            
  EKSCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref EKSCodeBuildProjectName
      ServiceRole: !Ref EKSCodeBuildServiceRoleArn
      Source:
        Type: CODEPIPELINE
        BuildSpec: eks-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_ECR
            Value: !GetAtt ECRRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EKSClusterName
            Type: PLAINTEXT
          - Name: SERVICE_ROLE_ARN
            Value: !Ref PodS3AccessRoleArn
            Type: PLAINTEXT
          - Name: WEB_ACL_ARN
            Value: !Ref WafRulesARN
            Type: PLAINTEXT

 ################################
  #                              #
  #  Image Scan Build Pipeline   #
  #                              #
  ################################

  ImageScanRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ImageScanECRRepositoryName


  ImageScanCodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  ImageScanCodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ImageScanCodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: IScanDenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt
                  - ImageScanCodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: IScanDenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - ImageScanCodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false

  IScanAmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-iscan-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref ImageScanAppPipeline

  ImageScanAppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: image-scan-pipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ImageScanCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ImageScanCodePipelineArtifactStoreBucket

  ImageScanCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: 'image-scan-demo-build'
      ServiceRole: !Ref ECRCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: imagescan-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_ECR
            Value: !GetAtt ImageScanRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: FALCON_CLIENT_ID
            Value: !Sub
              - '${arn}:client_id'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: FALCON_CLIENT_SECRET
            Value: !Sub
              - '${arn}:client_secret'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: CS_CLOUD
            Value: !Sub
              - '${arn}:cs_cloud'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: CS_SCAN_IMAGE
            Value: 'True'
            Type: PLAINTEXT

  ################################
  #                              #
  #    Sensor Import Pipeline    #
  #                              #
  ################################
  SensorECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref SensorECRRepositoryName
  SensorImportPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: sensor-import-pipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: 'Build'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref SensorCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  SensorCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  SensorCodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SensorCodeBuildServicePolicy
      Roles:
        - !Ref SensorCodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ecr:*
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - secretsmanager:*
            Resource:
              - !Ref SMFalconAPIKey
  SensorCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref SensorCodeBuildProjectName
      ServiceRole: !Ref SensorCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: sensor-buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: FALCON_CLIENT_ID
            Value: !Sub
              - '${arn}:client_id'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: FALCON_CLIENT_SECRET
            Value: !Sub
              - '${arn}:client_secret'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: FALCON_CID
            Value: !Sub
              - '${arn}:cid'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: CS_CLOUD
            Value: !Sub
              - '${arn}:cs_cloud'
              - { arn: !Ref SMFalconAPIKey }
            Type: SECRETS_MANAGER
          - Name: REPO_URI
            Value: !GetAtt SensorECRRepository.RepositoryUri
            Type: PLAINTEXT
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: CS_SCAN_IMAGE
            Value: 'True'
  
  ##########################
  #                        #
  #        Clean Up        #
  #                        # 
  ########################## 
  CleanUpECRRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ConfigPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - s3:DeleteObjectVersion
                  - s3:ListBucketVersions
                  - s3:GetBucketLogging
                  - s3:ListBucket
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                  - s3:GetObjectVersionAttributes
                  - s3:GetBucketPolicy
                  - ecr:DeleteRepository
                  - s3:GetObjectVersionAcl
                  - ecr:DescribeRepositories
                  - s3:GetBucketOwnershipControls
                  - s3:DeleteObject
                  - s3:DeleteBucket
                  - s3:ListBucketMultipartUploads
                  - s3:GetBucketWebsite
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketNotification
                  - s3:GetObject
                  - s3:GetBucketCORS
                  - s3:GetObjectVersionForReplication
                  - s3:GetBucketLocation
                  - s3:GetObjectVersion
                  - ecr:GetRepositoryPolicy
                  - s3:ListAllMyBuckets
                Resource: '*'

  CleanUpECR:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CleanUpECRFunction.Arn
      aws_region: !Ref "AWS::Region"
      aws_account: !Ref "AWS::AccountId"
      repository_list:
        - !Ref ECRRepositoryName
        - !Ref SensorECRRepositoryName
      CodePipelineArtifactStoreBucket: !Ref CodePipelineArtifactStoreBucket
  CleanUpECRFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Called on stack deletion. Removes objects from ECR and S3 to enabled stack deletion to complete
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt CleanUpECRRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import cfnresponse
          
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def delete_objects(bucket):
              s3 = boto3.resource('s3')
              s3_bucket = s3.Bucket(bucket)
              bucket_versioning = s3.BucketVersioning(bucket)
              if bucket_versioning.status == 'Enabled':
                response = s3_bucket.object_versions.delete()
              else:
                response = s3_bucket.objects.all().delete()
              s3_bucket.delete()
              logger.info('Delete object response {}'.format(response))
          
          def delete_repository(repo_list, account, region):
              logger.info('deleting {}'.format(repo_list))
              for repo in repo_list:
                client = boto3.client("ecr", region_name=region)
                try:
                  logger.info('Deleting repository {}'.format(repo))
                  response = client.delete_repository(registryId = account, repositoryName=repo, force=True)
                except Exception as error:
                  logger.info('Error {}'.format(error))
                  pass    
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              logger.info('Received event:{}'.format(json.dumps(event)))
              status = cfnresponse.SUCCESS
              # Delete the repositories int the list
              try:
                  repository_list = event['ResourceProperties']['repository_list']
                  aws_account = event['ResourceProperties']['aws_account']
                  aws_region = event['ResourceProperties']['aws_region']
                  codepipeline_bucket = event['ResourceProperties']['CodePipelineArtifactStoreBucket']
                  if event['RequestType'] == 'Delete':
                      delete_repository(repository_list, aws_account, aws_region)
                      # Delete the contents of the CodePipelineArtifactStoreBucket bucket
                      delete_objects(codepipeline_bucket)
              except Exception as error:
                  logging.error('Exception: {}'.format(error))
              finally:
                  cfnresponse.send(event, context, status, {}, None)

Outputs:
  SMFalconAPIKeyName:
    Value: !Ref SMFalconAPIKey

